correlations_vis <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy_vis[ss$study_task == task])
correlations_vis[task] =  paste(round(cor$estimate, 2), "p = ",round(cor$p.value, 3))
}
correlations_vis
correlations_hid <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy_hid[ss$study_task == task])
correlations_hid[task] =  paste(round(cor$estimate, 2), "p = ",round(cor$p.value, 3))
}
correlations_hid
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task])
correlations[task] = paste(round(cor$estimate, 2), "p=",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task])
correlations[task] = paste(round(cor$estimate, 2), "\np=",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task])
correlations[task] = paste(round(cor$estimate, 2), "\n p=",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task], method = "spearman")
correlations[task] = paste("r_s=", round(cor$estimate, 2), "p=",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task], method = "spearman")
correlations[task] = paste("r_s =", round(cor$estimate, 2), "; p =",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task], method = "spearman")
correlations[task] = paste0("r_s =", round(cor$estimate, 2), "; p =",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task], method = "spearman")
correlations[task] = paste0("r_s = ", round(cor$estimate, 2), "; p = ",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task], method = "spearman", )
correlations[task] = paste0("r_s = ", round(cor$estimate, 2), "; p = ",round(cor$p.value, 3))
}
correlations
correlations <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy[ss$study_task == task], method = "spearman",exact = F )
correlations[task] = paste0("r_s = ", round(cor$estimate, 2), "; p = ",round(cor$p.value, 3))
}
correlations
correlations_hid <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy_hid[ss$study_task == task], method = "spearman",exact = F )
correlations_hid[task] =  paste0("r_s = ", round(cor$estimate, 2), "; p = ",round(cor$p.value, 3))
}
correlations_hid
correlations_vis <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy_vis[ss$study_task == task], method = "spearman",exact = F )
correlations_vis[task] =  paste0("r_s = ", round(cor$estimate, 2), "; p = ",round(cor$p.value, 3))
}
correlations_vis
correlations_hid <- {}
for(task in unique(ss$study_task)) {
cor <- cor.test(ss$q_estimate[ss$study_task == task], ss$accuracy_hid[ss$study_task == task], method = "spearman",exact = F )
correlations_hid[task] =  paste0("r_s = ", round(cor$estimate, 2), "; p = ",round(cor$p.value, 3))
}
correlations_hid
ggplot(ss, aes(q_strategy)) +
geom_bar()
ggplot(ss, aes(q_strategy)) +
geom_bar() + facet_grid(study_fsm~trials_type, labeller = labeller(study_fsm = c(easy = "Easy", hard = "Hard")))
ss
ggplot(ss, aes(q_strategy)) +
geom_bar() +
facet_grid(study_fsm~trials_type, labeller = labeller(study_fsm = c(easy = "Easy", hard = "Hard")))
ggplot(ss, aes(color = q_strategy)) +
stat_bin()+
facet_grid(study_fsm~trials_type, labeller = labeller(study_fsm = c(easy = "Easy", hard = "Hard")))
ggplot(ss, aes(color = q_strategy)) +
stat_count()+
facet_grid(study_fsm~trials_type, labeller = labeller(study_fsm = c(easy = "Easy", hard = "Hard")))
ggplot(ss, aes(color = q_strategy)) +
stat_count()
ggplot(ss, aes(study_fsm, q_strategy, color = q_strategy)) +
stat_count()
ss %>% group_by(study_fsm, study_task, q_strategy) %>% summarise(n = n())
ss %>% group_by(q_strategy) %>% summarise(n = n())
ss %>% group_by(q_strategy) %>% summarise(n = n(), n_easy = count(participant_id[study_fsm == "easy"]))
ss %>% group_by(q_strategy) %>% summarise(n = n(), n_easy = n(participant_id[study_fsm == "easy"]))
ss %>% group_by(q_strategy) %>% summarise(n = n(), n_easy = n([study_fsm == "easy"]))
ss %>% group_by(q_strategy) %>% summarise(n = n(), n_easy = count(participant_id[study_fsm == "easy"]))
ss
ss %>% group_by(q_strategy) %>% summarise(median_acc = median(accuracy))
ss %>% group_by(q_strategy) %>% summarise(median_acc = median(accuracy), n = n())
ss %>% group_by(q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(median_acc)
ss %>% group_by(q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(n)
ss %>% group_by(q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(desc(n))
ss %>% group_by(q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(desc(n)) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_fsm, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(desc(n)) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_fsm, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_fsm, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(study_fsm, desc(n)) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_fsm, study_task, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(study_fsm, desc(n)) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_task, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(study_fsm, desc(n)) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_task, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(study_fsm, desc(n)) %>% filter(!is.na(q_strategy))
ss %>% group_by(study_task, q_strategy) %>% summarise(median_acc = median(accuracy), n = n()) %>% arrange(study_task, desc(n)) %>% filter(!is.na(q_strategy))
ss_betas <-  read.csv("../outputs/results_expected_accuracy.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
library(tidyverse)
library(ggrepel)
library(tidyquant)
library(ggdist)
library(ggthemes)
betas <- read.csv(file = "../outputs/results_mm_running.csv")
betas <- betas %>% mutate(sum_log_p_mean_times14 = sum_log_p/count*14)
betas_labels <- betas %>% group_by(task, condition, fsm) %>% summarize(p_max = max(sum_log_p_mean_times14),
p_zero = first(sum_log_p_mean_times14[beta == 0]), #!!!! maybe mistake here
p_boost = p_max - p_zero,
beta_max = beta[sum_log_p_mean_times14 == p_max]) %>% arrange(desc(p_boost))
betas <- betas %>% left_join(betas_labels) %>%
mutate(Label = ifelse(beta == beta_max, paste0("Î² = ", beta_max, "; ", round(p_boost, 2)), NA),
condition = fct_relevel(condition, c("visible_beta", "hidden_beta", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible_beta", "Hidden" = "hidden_beta", "Hidden AN" = "hidden_beta_an"),
task = fct_recode(task, "Control" = 'control', "Prediction" = "prediction", "Explanation" = "explanation"),
task = fct_relevel(task, c("Prediction", "Explanation", "Control")))
easy <- betas %>% filter(fsm == "easy")
hard <- betas %>% filter(fsm == "hard")
ggplot(easy, aes(beta, sum_log_p_mean_times14, color = task)) +
geom_line() + theme_classic() +
scale_color_manual(values = c("Prediction" = "#AA4499", "Explanation" = "#6699CC", "Control" = "#999933")) +
geom_label_repel(aes(label = Label), size = 3.2, force = 5, alpha = 0.8) +
facet_grid(.~condition) + xlab("Beta") + ylab("Probability of answers")
ggplot(hard, aes(beta, sum_log_p_mean_times14, color = task)) +
geom_line() + theme_classic() +
scale_color_manual(values = c("Prediction" = "#AA4499", "Explanation" = "#6699CC", "Control" = "#999933")) +
geom_label_repel(aes(label = Label), size = 3.2, force = 5, alpha = 0.8) +
facet_grid(.~condition) + xlab("Beta") + ylab("Probability of answers")
ss_betas <-  read.csv("../outputs/results_mm_participants.csv")
ss_betas_fsm <- ss_betas %>% filter(condition %in% c("visible_beta_fsm", "hidden_beta_fsm", "hidden_beta_fsm_an"))
ss_betas <- ss_betas %>% filter(condition %in% c("visible_beta", "hidden_beta", "hidden_beta_an")) %>%
group_by(participant_id, condition, fsm, task) %>% summarize(p_max = max(sum_log_p),
p_zero = sum(sum_log_p[beta == 0.00]),
p_boost = p_max - p_zero,
beta_max = beta[sum_log_p == p_max]) %>% ungroup() %>%
mutate(condition = as.factor(condition), task = as.factor(task))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible_beta", "hidden_beta", "hidden_beta_an")),
condition = fct_recode(condition, "Visible" = "visible_beta", "Hidden" = "hidden_beta", "Hidden AN" = "hidden_beta_an"),
task = fct_recode(task, "Control" = 'control', "Prediction" = "prediction", "Explanation" = "explanation"))
ggplot(ss_betas %>% filter(fsm == "hard"), aes(task, beta_max, fill = task)) + geom_boxplot(
width = 0.3,
# removing outliers
outlier.color = NA,
alpha = 0.5
)  + stat_dots(
# ploting on left side
side = "left",
# adjusting position
justification = 1.2,
# adjust grouping (binning) of observations
binwidth = 0.02
) +  # Themes and Labels
theme_classic() +
labs(
y = "Max Beta",
x = ""
)  +
scale_y_continuous(limits = c(0, 0.5), breaks = c(0, 0.2, 0.4, 0.5)) +
scale_fill_manual(values = c("Prediction" = "#AA4499", "Explanation" = "#6699CC", "Control" = "#999933")) +
facet_grid(.~condition) + coord_flip() +  theme(legend.position = "none", strip.text.x = element_text(size = 12), axis.text = element_text(size = 11))
# same for real fsm betas
ss_betas_fsm <- ss_betas_fsm %>% group_by(participant_id, condition, fsm, task) %>% summarize(p_max = max(sum_log_p),
p_zero = sum(sum_log_p[beta == 0.00]),
p_boost = p_max - p_zero,
beta_max = beta[sum_log_p == p_max]) %>% ungroup() %>%
mutate(condition = as.factor(condition), task = as.factor(task))
ss_betas_fsm <- ss_betas_fsm %>% mutate(condition = fct_relevel(condition, c("visible_beta_fsm", "hidden_beta_fsm", "hidden_beta_fsm_an")),
condition = fct_recode(condition, "Visible" = "visible_beta_fsm", "Hidden" = "hidden_beta_fsm", "Hidden AN" = "hidden_beta_fsm_an"),
task = fct_recode(task, "Control" = 'control', "Prediction" = "prediction", "Explanation" = "explanation"))
ggplot(ss_betas_fsm %>% filter(fsm == "hard"), aes(task, beta_max, fill = task)) + geom_boxplot(
width = 0.3,
# removing outliers
outlier.color = NA,
alpha = 0.5
)  + stat_dots(
# ploting on left side
side = "left",
# adjusting position
justification = 1.2,
# adjust grouping (binning) of observations
binwidth = 0.02
) +  # Themes and Labels
theme_classic() +
labs(
y = "Max Beta",
x = ""
)  +
scale_y_continuous(limits = c(0, 4), breaks = c(0, 0.2, 0.4, 0.6, 0.8)) +
scale_fill_manual(values = c("Prediction" = "#AA4499", "Explanation" = "#6699CC", "Control" = "#999933")) +
facet_grid(.~condition) + coord_flip() +  theme(legend.position = "none", strip.text.x = element_text(size = 12), axis.text = element_text(size = 11))
ggplot(ss_betas %>% filter(fsm == "hard"), aes(beta_max, fill = task)) +
geom_histogram(binwidth = 0.05) + facet_grid(task~condition)
ss_betas <-  read.csv("../outputs/results_expected_accuracy.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas_fsm <- ss_betas %>% filter(condition %in% c("visible_fsm", "hidden_fsm", "hidden_an_fsm"))
ss_betas_mm <- ss_betas %>% filter(condition %in% c("visible_mm", "hidden_mm", "hidden_an_mm"))
ss_betas_mm <- ss_betas_mm %>%
mutate(condition = fct_relevel(condition, c("visible_mm", "hidden_mm", "hidden_an_mm")),
condition = fct_recode(condition, "Visible" = "visible_mm", "Hidden" = "hidden_mm", "Hidden AN" = "hidden_an_mm"))
ss_betas_fsm <- ss_betas_fsm %>%
mutate(condition = fct_relevel(condition, c("visible_fsm", "hidden_fsm", "hidden_an_fsm")),
condition = fct_recode(condition, "Visible" = "visible_fsm", "Hidden" = "hidden_fsm", "Hidden AN" = "hidden_an_fsm"))
View(ss_betas)
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv")
View(ss_betas)
ss_betas <-  read.csv("../outputs/results_expected_accuracy.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas_fsm <- ss_betas %>% filter(condition %in% c("visible_fsm", "hidden_fsm", "hidden_an_fsm"))
ss_betas_mm <- ss_betas %>% filter(condition %in% c("visible_mm", "hidden_mm", "hidden_an_mm"))
ss_betas_mm <- ss_betas_mm %>%
mutate(condition = fct_relevel(condition, c("visible_mm", "hidden_mm", "hidden_an_mm")),
condition = fct_recode(condition, "Visible" = "visible_mm", "Hidden" = "hidden_mm", "Hidden AN" = "hidden_an_mm"))
ss_betas_fsm <- ss_betas_fsm %>%
mutate(condition = fct_relevel(condition, c("visible_fsm", "hidden_fsm", "hidden_an_fsm")),
condition = fct_recode(condition, "Visible" = "visible_fsm", "Hidden" = "hidden_fsm", "Hidden AN" = "hidden_an_fsm"))
View(ss_betas)
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv")
View(ss_betas)
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas_mm <- ss_betas_mm %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas_mm %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")))
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% mutate(across(participant_id:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(condition, c("easy", "hard")),
fsm = fct_recode(condition, "Easy" = "easy", "Hard" = "hard"))
read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm)
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(condition, c("easy", "hard")),
fsm = fct_recode(condition, "Easy" = "easy", "Hard" = "hard"))
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(fsm, c("easy", "hard")),
fsm = fct_recode(fsm, "Easy" = "easy", "Hard" = "hard"))
plot1 <- ggplot(ss_betas_mm, aes(task, predicted_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Predicted Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition, labeller = labeller(fsm = c(easy = "Easy", hard = "Hard")))  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
plot1 <- ggplot(ss_betas, aes(task, predicted_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Predicted Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition, labeller = labeller(fsm = c(easy = "Easy", hard = "Hard")))  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(fsm, c("easy", "hard")),
fsm = fct_recode(fsm, "Easy" = "easy", "Hard" = "hard"))
plot1 <- ggplot(ss_betas, aes(task, predicted_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Predicted Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
read.csv("../outputs/predicted_accuracy_v2.csv")
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(fsm, c("easy", "hard")),
fsm = fct_recode(fsm, "Easy" = "easy", "Hard" = "hard"))
plot1 <- ggplot(ss_betas, aes(task, mm_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Predicted Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
plot1 <- ggplot(ss_betas, aes(task, mm_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Mental Model Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(fsm, c("easy", "hard")),
fsm = fct_recode(fsm, "Easy" = "easy", "Hard" = "hard"))
plot1 <- ggplot(ss_betas, aes(task, predicted_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Predicted Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
plot1 <- ggplot(ss_betas, aes(task, mm_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Mental Model Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(fsm, c("easy", "hard")),
fsm = fct_recode(fsm, "Easy" = "easy", "Hard" = "hard"))
plot1 <- ggplot(ss_betas, aes(task, predicted_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Predicted Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
plot1 <- ggplot(ss_betas, aes(task, mm_accuracy, fill = task)) +
geom_boxplot(
width = 0.5,
# removing outliers
outlier.color = NA,
alpha = 0.5,
position = position_dodge(width=0.8)
)   +  # Themes and Labels
labs(fill = "",
y = "Mental Model Accuracy",
x = ""
)  +
geom_hline(yintercept = 0.5, color = "black", size = 10, alpha = 0.2)+
geom_point(position = position_jitterdodge(dodge.width = 0.8, jitter.width = 0.4), size = 1, alpha = 0.2)+
scale_fill_manual(values = c("Prediction" = "#AA4499","Control" = "#999933", "Explanation" = "#6699CC")) +
facet_grid(fsm~condition)  + theme_classic()+  theme(legend.position = "top", strip.text.x = element_text(size = 12), axis.text = element_text(size = 12), text = element_text(size = 15), axis.text.x=element_blank(),axis.ticks.x=element_blank())
plot1
View(ss_betas)
ss_betas <-  read.csv("../outputs/predicted_accuracy_v2.csv") %>% relocate(fsm) %>% mutate(across(fsm:condition, as.factor)) %>%
mutate(task = fct_recode(task,  "Prediction" = "prediction", "Control" = 'control', "Explanation" = "explanation"),
task = fct_relevel(task,  c("Prediction","Control","Explanation")))
ss_betas <- ss_betas %>%
mutate(condition = fct_relevel(condition, c("visible", "hidden", "hidden_an")),
condition = fct_recode(condition, "Visible" = "visible", "Hidden" = "hidden", "Hidden AN" = "hidden_an"))
ss_betas <- ss_betas %>%
mutate(fsm = fct_relevel(fsm, c("easy", "hard")),
fsm = fct_recode(fsm, "Easy" = "easy", "Hard" = "hard"))
View(ss_betas)
number_na <- ss_betas %>% group_by(task, fsm, condition) %>% summarise(sum_na = sum(count_nan))
number_na
number_na <- ss_betas %>% group_by(task, fsm, condition) %>% summarise(sum_na = sum(count_nan)) %>% arrange(desc(sum_na))
number_na
number_na <- ss_betas %>% group_by(fsm, task, condition) %>% summarise(sum_na = sum(count_nan)) %>% arrange(desc(sum_na))
number_na
number_na <- ss_betas %>% group_by(fsm, task, condition) %>% summarise(sum_na = sum(count_nan))
number_na
number_na <- ss_betas %>% group_by(fsm, task, condition) %>% summarise(sum_na = sum(count_nan)) %>% arrange(desc(sum_na))
number_na
number_na <- ss_betas %>% group_by(participant_id, fsm, task, condition) %>% summarise(sum_na = sum(count_nan)) %>% arrange(desc(sum_na))
number_na
ss_betas %>% group_by(participant_id, fsm, task, condition) %>% summarise(sum_na = sum(count_nan))
number_na <- ss_betas %>% group_by(participant_id, fsm, task, condition) %>% summarise(sum_na = sum(count_nan)) %>% filter(sum_na > 0) %>% group_by(fsm, task, condition) %>% count()
number_na
number_na <- ss_betas %>% group_by(participant_id, fsm, task, condition) %>% summarise(sum_na = sum(count_nan)) %>% filter(sum_na > 0) %>% group_by(fsm, task, condition) %>% count() %>% arrange(desc(n))
number_na
number_na <- ss_betas %>% group_by(participant_id, fsm, task, condition) %>% summarise(sum_na = sum(count_nan)) %>% filter(sum_na > 4) %>% group_by(fsm, task, condition) %>% count() %>% arrange(desc(n))
number_na
